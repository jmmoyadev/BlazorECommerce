@page "/learnBlazor/lifecycle"
@using System.Threading
@inject ILogger<LifeCycle> logger

<h3>LifeCycle</h3>

<p role="status">Current count: @currentCount</p>

<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>
<br />
<br />
<button class="btn btn-secondary" @onclick="StartCountdown">Start Countdown</button> @Count


<div class="mb-5">
    <hr />
    @foreach (var item in EventType)
    {
        @item
        <hr />
    }
</div>

<div class="p-5">
    <_LifeCycleChild CountValue="currentCount"></_LifeCycleChild>
</div>


@code {
    private int currentCount = 0;
    private int Count = 5;

    List<string> EventType = new();

    private void IncrementCount()
    {
        currentCount++;
    }

    protected override void OnInitialized()
    {
        EventType.Add("OnInitialized is called");
        logger.LogWarning("{EventName} is called", "OnInitialized");
    }

    protected override async Task OnInitializedAsync()
    {
        EventType.Add("OnInitializedAsync is called");
        logger.LogWarning("{EventName} is called", "OnInitializedAsync");
        await Task.CompletedTask;
    }

    protected override void OnParametersSet()
    {
        EventType.Add("OnParametersSet is called");
        logger.LogWarning("{EventName} is called", "OnParametersSet");
    }

    protected override async Task OnParametersSetAsync()
    {
        EventType.Add("OnParametersSetAsync is called");
        logger.LogWarning("{EventName} is called", "OnParametersSetAsync");
        await Task.CompletedTask;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            currentCount = 999;
        }
        else
        {
            currentCount = 0;
        }

        EventType.Add($"OnAfterRender is called. FirstRender: {firstRender}");
        logger.LogWarning("{EventName} is called. FirstRender: {FirstRender}", "OnAfterRender", firstRender);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        EventType.Add($"OnAfterRenderAsync is called. FirstRender: {firstRender}");
        logger.LogWarning("{EventName} is called. FirstRender: {FirstRender}", "OnAfterRenderAsync", firstRender);

        await Task.CompletedTask;
    }

    protected override bool ShouldRender()
    {
        EventType.Add($"ShouldRender is called");
        logger.LogWarning("{EventName} is called.", "ShouldRender");
        return base.ShouldRender();
    }

    void StartCountdown()
    {
        var thimer = new Timer(TimeCallback, null, 1000, 1000);
    }

    void TimeCallback(object state)
    {
        if (Count > 0)
        {
            Count--;
            InvokeAsync(StateHasChanged);
        }
    }


}
