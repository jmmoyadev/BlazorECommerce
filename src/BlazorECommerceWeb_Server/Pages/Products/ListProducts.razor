@page "/products"

@using BlazorECommerceWeb_Application.Modules.Products.Commands
@using BlazorECommerceWeb_Application.Modules.Products.Queries

@inject IJSRuntime _jsRuntime
@inject IMediator _mediator

<_DeleteConfirmation ConfirmationChanged="ConfirmDelete_Click" IsParentComponentProcessing="IsLoading"></_DeleteConfirmation>

<div class="row mt-4">
    <div class="col-6">
        <h3 class="text-primary mb-3 ml-3">Category List</h3>
    </div>
</div>

@if (IsLoading == true)
{
    <div class="spinner"></div>
}
else
{
    <div class="row mt-4">
        <div class="col-6 offset-6 text-end">
            <a href="products/create" class="btn btn-primary">Add New Product</a>
        </div>
        <table class="table table-striped table-hover align-middle">
            <thead>
                <tr>
                    <th width="100">Actions</th>
                    @* <th width="100">Id</th> *@
                    <th>Name</th>
                    <th>Shop Favorites</th>
                    <th>Customer Favorites</th>
                    <th>Category</th>
                </tr>
            </thead>
            <tbody>
                @if (ProductsList != null && ProductsList.Any())
                {
                    @foreach (var prod in ProductsList)
                    {
                        <tr>
                            <td>
                                <NavLink href="@($"products/edit/{prod.Id}")" title="Edit" aria-label="Edit" class="btn btn-primary btn-sm"><span class="oi oi-pencil" aria-hidden="true"></span> </NavLink>
                                <button class="btn btn-danger btn-sm" title="Delete" aria-label="Delete" @onclick="()=>HandleDelete(prod.Id)"><span class="oi oi-trash" aria-hidden="true"></span></button>
                            </td>
                            @* <td>@cat.Id</td> *@
                            <td>@prod.Name</td>
                            <td><input type="checkbox" disabled checked=@prod.ShopFavorites /></td>
                            <td><input type="checkbox" disabled checked=@prod.CustomerFavorites /></td>
                            <td>@prod.Category?.Name</td>
                        </tr>
                    }
                }
                else
                {
                    <tr><td colspan="5" class="text-center">No data found</td></tr>
                }
            </tbody>
        </table>
    </div>
}

@code {
    private IEnumerable<ProductDto> ProductsList { get; set; } = null!;

    private bool IsLoading { get; set; }

    private int DeleteProductId { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadProducts();
        }
    }

    private async Task LoadProducts()
    {
        IsLoading = true;
        StateHasChanged();

        await Task.Delay(1000); // for simulate loading

        var result = await _mediator.Send(new GetProductsList.Request());
        ProductsList = result.Products;

        IsLoading = false;
        StateHasChanged();
    }

    private void HandleDelete(int id)
    {
        DeleteProductId = id;
        _jsRuntime.InvokeVoidAsync("ShowDeleteConfirmationModal");
    }

    public async Task ConfirmDelete_Click(bool isConfirmed)
    {
        IsLoading = true;
        if (isConfirmed && DeleteProductId != 0)
        {

            await _mediator.Send(new DeleteProduct.Request(DeleteProductId));

            await LoadProducts();

            await _jsRuntime.InvokeVoidAsync("HideDeleteConfirmationModal");
        }
        IsLoading = false;
    }

}
