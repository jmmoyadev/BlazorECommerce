@page "/products/create"
@page "/products/edit/{id:int}"

@using BlazorECommerceWeb_Application.Modules.Categories.Queries
@using BlazorECommerceWeb_Application.Modules.Products.Commands
@using BlazorECommerceWeb_Application.Modules.Products.Queries
@using MediatR

@inject IMediator _mediator
@inject IFileUpload _fileUpload
@inject NavigationManager _navManager
@inject IJSRuntime _jsRuntime

<div class="row mt-4">
    <h3 class="text-primary mb-3 ml-3">@Title Product</h3>
</div>
@if (IsLoading == true)
{
    <div class="spinner"></div>
}
else
{
    <div class="row mt-4">
        <div class="col-12">
            <EditForm Model="_currentProduct" OnValidSubmit="AddOrUpdateProduct">
                <DataAnnotationsValidator></DataAnnotationsValidator>
                <div class="form-group col-12 col-lg-6 mb-3">
                    <label class="form-label fw-bold">Name</label>
                    <InputText class="form-control" @bind-Value="_currentProduct.Name"></InputText>
                    <ValidationMessage For="()=>_currentProduct.Name"></ValidationMessage>
                </div>

                <div class="form-group col-12 col-lg-6 mb-3">
                    <label class="form-label fw-bold">Description</label>
                    <RadzenHtmlEditor Name="Description" @bind-Value=@_currentProduct.Description style="height: 300px;" UploadUrl="upload/image" />
                    <RadzenRequiredValidator Component="Description" Popup="false"  />

                    @* <ValidationMessage For="()=>_currentProduct.Description"></ValidationMessage> *@
                </div>

                <div class="form-group col-12 col-lg-6 mb-3">
                    <label class="form-label fw-bold">Category</label>
                    <InputSelect class="form-select" @bind-Value="_currentProduct.CategoryId">
                        <option value="0" disabled="disabled" selected>Select category...</option>

                        @foreach (var cat in CategoriesList)
                        {
                            <option value="@cat.Id">@cat.Name</option>
                        }

                    </InputSelect>
                    <ValidationMessage For="()=>_currentProduct.CategoryId"></ValidationMessage>
                </div>

                <div class="form-group col-12 col-lg-6 mb-3">
                    <label class="form-label fw-bold">Color</label>
                    <InputText class="form-control" @bind-Value="_currentProduct.Color"></InputText>

                    <ValidationMessage For="()=>_currentProduct.Color"></ValidationMessage>
                </div>

                <div class="form-group col-12 col-lg-6 mb-3">
                    <div class="form-check">
                        <InputCheckbox id="chkShopFavorites" @bind-Value=_currentProduct.ShopFavorites class="form-check-input"></InputCheckbox>
                        <label for="chkShopFavorites" class="form-label fw-bold">Is Shop Favorites</label>
                    </div>
                </div>

                <div class="form-group col-6 mb-3">
                    <div class="form-check">
                        <InputCheckbox id="chkCustomeFavorites" @bind-Value=_currentProduct.CustomerFavorites class="form-check-input"></InputCheckbox>
                        <label for="chkCustomeFavorites" class="form-label fw-bold">Is Customer Favorites</label>
                    </div>
                </div>

                <div class="form-group col-12 col-lg-6 mb-3">
                    <InputFile OnChange="HandleImageUpload"></InputFile>
                </div>

                <div class="mb-3">
                    @if (!string.IsNullOrEmpty(_currentProduct.ImageUrl))
                    {
                        <img src="@_currentProduct.ImageUrl" width="200" />
                    }
                    else
                    {
                        <img src="img/no-image.png" width="200" />
                    }
                </div>

                <div class="form-group col-12 mb-3">
                    <RadzenButton ButtonType="Radzen.ButtonType.Submit" ButtonStyle="Radzen.ButtonStyle.Primary" Text="Save"></RadzenButton>
                    <RadzenButton ButtonType="Radzen.ButtonType.Reset" ButtonStyle="Radzen.ButtonStyle.Light" Text="Cancel" Click="@(()=>_navManager.NavigateTo("/products"))"></RadzenButton>
                </div>
            </EditForm>
        </div>
    </div>
}


@code {

    [Parameter]
    public int Id { get; set; }



    private bool IsLoading { get; set; }

    private ProductDto _currentProduct = new();

    private string? _oldImageUrl;

    private IEnumerable<CategoryDto> CategoriesList { get; set; } = Enumerable.Empty<CategoryDto>();

    private string Title = "Create";

    private string Result = string.Empty;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadCategories();
            await LoadProduct();
        }
    }

    private async Task LoadProduct()
    {


        await Task.Delay(1000); // for simulate loading

        if (Id != 0)
        {
            Title = "Edit";

            var result = await _mediator.Send(new GetProductById.Request(Id));

            if (result != null)
            {
                _currentProduct = result.Product;
                _oldImageUrl = result.Product.ImageUrl;
            }
        }

        IsLoading = false;
        StateHasChanged();
    }

    private async Task LoadCategories()
    {
        IsLoading = true;
        StateHasChanged();

        await Task.Delay(1000); // for simulate loading

        var result = await _mediator.Send(new GetCategoriesList.Request());
        CategoriesList = result.Categories;

        IsLoading = false;
        StateHasChanged();
    }

    private async Task AddOrUpdateProduct()
    {
        if (!string.IsNullOrWhiteSpace(_oldImageUrl) && _oldImageUrl != _currentProduct.ImageUrl)
        {
            await _fileUpload.DeleteFile(_oldImageUrl);
        }

        var result = await _mediator.Send(new AddOrUpdateProduct.Request() { Product = _currentProduct });

        if (result.Success)
            await _jsRuntime.ToastrSuccess(result.Message);
        else
            await _jsRuntime.ToastrError(result.Message);

        _navManager.NavigateTo("/products");
    }

    private async Task HandleImageUpload(InputFileChangeEventArgs e)
    {
        string[] validExtensions = new string[] { ".jpg", ".png", ".jpeg" };

        IsLoading = true;
        try
        {
            if (e.GetMultipleFiles().Count > 0)
            {
                foreach (var file in e.GetMultipleFiles())
                {
                    FileInfo fileInfo = new FileInfo(file.Name);

                    if (validExtensions.Contains(fileInfo.Extension.ToLower()))
                    {
                        _currentProduct.ImageUrl = await _fileUpload.UploadFile(file);
                    }
                    else
                    {
                        await _jsRuntime.ToastrError("Please select .jpg/.jpeg/.png file only");
                        return;
                    }

                }
            }
            IsLoading = false;
        }
        catch (Exception ex)
        {
            await _jsRuntime.ToastrError(ex.Message);
        }
    }

}
